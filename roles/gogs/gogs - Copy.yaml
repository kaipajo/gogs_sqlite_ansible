---
- hosts: gogsgrp
  vars_files:
  - vars
  become: yes
  tasks:
    - name: Yum udpate
      yum:
        name: '*'
        state: latest
    - name: Install required packages
      yum:
        name: "{{item}}"
        state: latest
      with_items:
      - "{{req_packages}}"
    - name: Create gogs user
      user: 
        name: "{{gogs_user}}"
        state: present
        home: /opt/gogs
        createhome: yes
    - name: Download gogs package
      get_url: 
        url: "{{gogs_package}}"
        dest: /opt/gogs.tar.gz
    - name: Create directory structure
      file:
        path: "{{item}}"
        state: directory
        owner: gogs
        group: gogs
      with_items:
      - "{{gogs_dirs}}"
    - name: Untar gogs 
      unarchive:
        remote_src: yes
        src: /opt/gogs.tar.gz
        dest: /opt
    - name: 
      file:
        path: "{{gogs_conf_dir}}"
        state: directory
        owner: gogs
        group: gogs
    - name: Copy gogs service file
      copy:
        src: files/gogs.service
        dest: /etc/systemd/system/gogs.service
    - name: Copy gogs configuration file
      copy: 
        src: files/app.ini
        dest: "{{gogs_conf_dir}}app.ini"
    - name: Set gogs dir & file permissions
      file:
        path: "{{item}}"
        owner: gogs
        group: gogs
      with_items:
      - "{{gogs_dirs}}"
      - "{{gogs_conf_dir}}"
    - name: Start and enable gogs
      systemd:
        name: gogs
        state: started
        enabled: yes
    # - name: Update and restart all nodes
    #   become: true
    #   shell: sleep 2 && shutdown -r now "Reboot triggered by Ansible"
    #   async: 1
    #   poll: 0
    #   ignore_errors: true
    # - name: Wait for host to come back up
    #   local_action:
    #     module: wait_for
    #     host: "{{ inventory_hostname }}"
    #     port: 22
    #     delay: 5
    #     timeout: 300
 
